<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>狗好看の世界</title>
    <link>https://DogLooksGood.github.io</link>
    <description>Less words, more attempting.</description>
    <pubDate>Sat, 05 Mar 2016 23:08:47 CST</pubDate>
    <lastBuildDate>Sat, 05 Mar 2016 23:08:47 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>DataScript&lt;--&gt;Datomic数据同步</title>
      <link>https://DogLooksGood.github.io/blog/2016/03/02/datascript&lt;--&gt;datomic数据同步/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>DataScript&lt;--&gt;Datomic数据同步</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">新的方法</a>
<ul>
<li><a href="#orgheadline2">一种查询方法(不能解决所有问题)</a></li>
</ul>
</li>
<li><a href="#orgheadline7">这种方式只能增量同步</a>
<ul>
<li><a href="#orgheadline3">数据结构</a></li>
<li><a href="#orgheadline4">数据的查询</a></li>
<li><a href="#orgheadline5">数据的更新</a></li>
<li><a href="#orgheadline6">流程</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">新的方法</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
目前能想到的方法是拿到 <code>tx-report</code> 的时候, 查询两次, 一次查询 <code>db-after</code>, 一次查询 <code>db-before</code>.
如果直接查询全量数据, 涉及到的范围会非常大. 但是datomic支持指定多个数据源.
</p>

<p>
假设有一个查询是这样的逻辑:
</p>
<div class="org-src-container">

<pre class="src src-clojure">(d/q '[:find
       [(pull ?e [:db/id
                  :message/content
                  {:message/from [:user/nickname]
                   :message/to [:user/nickname]}]) ...]
           :where
           [?e :message/content]
           [?e :message/to ?u]
           [?e :message/from ?from]
           [?u :user/nickname "dog"]
           [?u :user/friends ?from]]
      (d/db conn))
</pre>
</div>
<p>
这个查询, 查询一个名叫dog的用户, 收到的所有来自于他的好友, 并发送给他的信息.
这种查询的结果, 在两种情况下会发生变化.
</p>
<ul class="org-ul">
<li>产生了新的符合条件的信息</li>
<li>dog的好友列表, 发生了变化.</li>
</ul>

<p>
监听 <code>tx-report-queue</code>, 我们可以得到四个比较重要的东西. 
</p>
<ul class="org-ul">
<li><code>db-before</code> 事务发生之前的数据库</li>
<li><code>db-after</code> 事务发生之后的数据库</li>
<li><code>tx-data</code> 事务的所有datom, 本身也是一个数据源</li>
<li><code>tempids</code> 事务中新增数据的entity id</li>
</ul>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2">一种查询方法(不能解决所有问题)</h3>
<div class="outline-text-3" id="text-orgheadline2">
<div class="org-src-container">

<pre class="src src-clojure">(d/q '[:find [(pull ?e [:db/id
                          :message/content
                          {:message/from [:user/nickname]
                           :message/to [:user/nickname]}]) ...]
         :in $ $tx-data
         :where
         [$tx-data ?u]
         [$ ?e :message/to ?u]
         [$ ?e :message/from ?from]
         [$ ?u :user/nickname "dog"]
         [$ ?u :user/friends ?from]]
    db tx-data)
</pre>
</div>
<p>
假设用户列表发生变化, 我们用这个查询查询两次, 一次db为 <code>db-before</code>, 一次db为 <code>db-after</code>.
</p>

<p>
然后对比得到的数据, 我们就得到了之前的查询结果的增量变化(新增或减少数据).
</p>

<p>
如果不考虑数据的减少, 那么还是可以用下面的方法.
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7">这种方式只能增量同步</h2>
<div class="outline-text-2" id="text-orgheadline7">
</div><div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3">数据结构</h3>
<div class="outline-text-3" id="text-orgheadline3">
<p>
消息有:message/to和:message/content, 用户有:user/nickname.
:message/to是ref类型, 指向用户的entity-id
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4">数据的查询</h3>
<div class="outline-text-3" id="text-orgheadline4">
<div class="org-src-container">

<pre class="src src-clojure">(d/q '[:find [(pull ?e [*]) ...]
       :in $ ?n
       :where
       [?e :message/to ?u]
       [?u :user/nickname ?n]]
  (d/db conn) "dog")
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5">数据的更新</h3>
<div class="outline-text-3" id="text-orgheadline5">
<div class="org-src-container">

<pre class="src src-clojure">(def tx-data
  [[1321867981 :message/to 1236782618 1283768726 true]
   [1321867981 :message/content "dog" 1283768726 true]])

(d/q '[:find [(pull ?e [*]) ...]
       :in $ $tx-data ?n
       :where
       [$tx-data ?e]
       [$ ?e :message/to ?u]
       [$ ?u :user/nickname ?n]]
  db-after tx-data "dog")
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6">流程</h3>
<div class="outline-text-3" id="text-orgheadline6">
<ul class="org-ul">
<li>客户端UI组件加载时, 向服务器和DataScript(还没有数据)发起查询. 查询语句需要是pull风格的.</li>
<li>服务器通过pull的查询, 查出来需要的entity, 直接返回给客户端. 
客户端不需要将entity拆分成tx, 直接合并到DataScript即可.</li>
<li>监听tx-report-queue, 或者新发生transaction的tx-data和db-after, 
在原有查询的基础上组合新的查询. 可以查询到所有受到影响的entity.</li>
<li>把受到影响的entity推送给客户端.</li>
<li>服务器推送的数据, 客户端UI组件重绘.</li>
</ul>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-03-05</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/03/02/datascript&lt;--&gt;datomic数据同步/</guid>
    </item>
    <item>
      <title>Emacs Clojure 开发的的一些配置</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/19/cider</link>
      <description><![CDATA[Cider的一些实用配置]]></description>
      <pubDate>2016-03-02</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/19/cider</guid>
    </item>
    <item>
      <title>从OOP的设计模式到FP</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/23/oop2fp</link>
      <description><![CDATA[Clojure中一些设计模式的实现]]></description>
      <pubDate>2016-02-23</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/23/oop2fp</guid>
    </item>
    <item>
      <title>本狗的Docker尝试</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/23/docker</link>
      <description><![CDATA[Docker的常用命令和配置]]></description>
      <pubDate>2016-02-23</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/23/docker</guid>
    </item>
    <item>
      <title>Rum - 一个简单,灵活,可扩展的ClojureScript的React实现</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/13/rum</link>
      <description><![CDATA[Rum的学习笔记]]></description>
      <pubDate>2016-02-22</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/13/rum</guid>
    </item>
    <item>
      <title>Leiningen 模板的创建</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/19/lein_template</link>
      <description><![CDATA[Leiningen 模板创建]]></description>
      <pubDate>2016-02-22</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/19/lein_template</guid>
    </item>
    <item>
      <title>Hello World</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/12/hello-world</link>
      <description><![CDATA[This is the test]]></description>
      <pubDate>2016-02-14</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/12/hello-world</guid>
    </item>
  </channel>
</rss>