<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>狗好看の世界</title>
    <link>https://DogLooksGood.github.io</link>
    <description>Less words, more attempting.</description>
    <pubDate>Thu, 31 Mar 2016 22:54:06 CST</pubDate>
    <lastBuildDate>Thu, 31 Mar 2016 22:54:06 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>自定义EDN的reader function</title>
      <link>https://DogLooksGood.github.io/blog/2016/03/30/自定义edn的reader-function/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>自定义EDN的reader function</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">需求</a></li>
<li><a href="#orgheadline2">解决方案</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">需求</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
有时需要在EDN的数据结构中, 写一些自定义的类型.
如果使用 <code>(:some-type x)</code> 或者 <code>[:some-tye x]</code>, 不好处理. 
理想的情况是我们读取到数据的时候, 直接将其转换成对应的类型.
而不是用传统的方式, 先将数据处理成普通的数据结构, 再逐步处理特定的部分.
</p>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">解决方案</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
使用自定义的 reader function.
假设我们接受的数据结构(EDN字符串)如下:
</p>
<div class="org-src-container">

<pre class="src src-clojure">[{:name "Dog.LooksGood"
  :age 18}
 {:name "Foo.Bar"
  :age 16}]
</pre>
</div>
<p>
我们希望得到
</p>
<div class="org-src-container">

<pre class="src src-clojure">[{:name {:first "Dog"
         :last "LooksGood"}
  :age 18}
 {:name {:first "Foo"
         :last "Bar"}
  :age 16}]
</pre>
</div>
<p>
首先, 我们自定义一个标签 <code>#name</code> 来标识一种特殊的数据处理方式.
接受的数据应该应该为
</p>
<div class="org-src-container">

<pre class="src src-clojure">[{:name #name "Dog.LooksGood"
    :age 18}
   {:name #name "Foo.Bar"
    :age 16}]
</pre>
</div>
<p>
使用 <code>clojure.edn/read-string</code> 的时候, 传入自定义reader function.
</p>
<div class="org-src-container">

<pre class="src src-clojure">(require '[clojure.edn :as edn])

;; EDN数据
(def edn-string
  "[{:name #name \"Dog.LooksGood\"
      :age 18}
     {:name #name \"Foo.Bar\"
      :age 16}]")

;; 自定义reader
(defn parse-name [name]
  (let [[f l] (clojure.string/split name #"\.")]
    {:first f
     :last l}))

(edn/read-string
  {:readers {'name parse-name}}
  edn-string)
;; =&gt;[{:name {:first "Dog", :last "LooksGood"}, :age 18} {:name {:first "Foo", :last "Bar"}, :age 16}]
</pre>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-03-31</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/03/30/自定义edn的reader-function/</guid>
    </item>
    <item>
      <title>关于快速开发的构思</title>
      <link>https://DogLooksGood.github.io/blog/2016/03/31/关于快速开发的构思/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>关于快速开发的构思</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline9">API</a>
<ul>
<li><a href="#orgheadline2">CLJC</a>
<ul>
<li><a href="#orgheadline1">提供的API.</a></li>
</ul>
</li>
<li><a href="#orgheadline5">CLJS</a>
<ul>
<li><a href="#orgheadline3">需要提供的配置.</a></li>
<li><a href="#orgheadline4">提供的API.</a></li>
</ul>
</li>
<li><a href="#orgheadline8">CLJ</a>
<ul>
<li><a href="#orgheadline6">需要提供的配置.</a></li>
<li><a href="#orgheadline7">回调</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>


<div id="outline-container-orgheadline9" class="outline-2">
<h2 id="orgheadline9">API</h2>
<div class="outline-text-2" id="text-orgheadline9">
</div><div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2">CLJC</h3>
<div class="outline-text-3" id="text-orgheadline2">
</div><div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1">提供的API.</h4>
<div class="outline-text-4" id="text-orgheadline1">
<p>
<b>defquery</b> 定义query
</p>
<div class="org-src-container">

<pre class="src src-clojure">(defquery &lt;-stack-detail
  {:db/id        s/Int
   :size         s/Int
   :author       s/Keyword})
</pre>
</div>

<p>
<b>defcommand</b> 定义command
</p>
<div class="org-src-container">

<pre class="src src-clojure">(defcommand publish-stack-&gt;
  {:stack/content       s/Str
   :stack/title         s/Str})
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5">CLJS</h3>
<div class="outline-text-3" id="text-orgheadline5">
</div><div id="outline-container-orgheadline3" class="outline-4">
<h4 id="orgheadline3">需要提供的配置.</h4>
<div class="outline-text-4" id="text-orgheadline3">
<ul class="org-ul">
<li>get, 用来发送query/fetch, query/subscribe请求.</li>
<li>post, 用来发送command/dispatch请求.</li>
<li>ws-handler, 用来处理update/push, command/sync.</li>
</ul>
<div class="org-src-container">

<pre class="src src-clojure">(let [{:keys [ws-handler] (setup {:get get-fn :post post-fn})}]
  ;; Start Websocket loop
  (sente/start-chsk-router! ch-recv ws-handler))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-4">
<h4 id="orgheadline4">提供的API.</h4>
<div class="outline-text-4" id="text-orgheadline4">
<ul class="org-ul">
<li>dispatch 发送command/dispatch. POST请求到服务器. 响应时同步command的状态.</li>
<li>fetch 发送query/fetch. GET请求到服务器, 返回查询结果.</li>
<li>subscribe 发送query/subscribe. GET请求到服务器, 返回查询结果.</li>
</ul>
<div class="org-src-container">

<pre class="src src-clojure">;; Dispatch Command
(dispatch publish-stack-&gt;
  {:stack/content "Clojure is awesome!"
   :stack/title "Hello"})

;; Fetch Query
(fetch &lt;-stack-detail
  {:db/id  10
   :size   50
   :author :all})

;; Subscribe Query
(subscribe &lt;-stack-detail
  {:db/id  10
   :size   30
   :author :all})
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8">CLJ</h3>
<div class="outline-text-3" id="text-orgheadline8">
</div><div id="outline-container-orgheadline6" class="outline-4">
<h4 id="orgheadline6">需要提供的配置.</h4>
<div class="outline-text-4" id="text-orgheadline6">
<ul class="org-ul">
<li>get-handler, 用来对接query/fetch</li>
<li>post-handler, 用来对接command/dispatch请求.</li>
<li>ws-send, 用来推送update/push和command/sync.</li>
</ul>
<div class="org-src-container">

<pre class="src src-clojure">(let [{:keys [get-handler post-handler tx-handler sync-command]} (setup {:ws-send ws-send})]
  (defroute route
    (GET "/api" get-handler)
    (POST "/api" post-handler)))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-4">
<h4 id="orgheadline7">回调</h4>
<div class="outline-text-4" id="text-orgheadline7">
<ul class="org-ul">
<li>register-query-handler</li>
<li>register-command-handler</li>
</ul>
<div class="org-src-container">

<pre class="src src-clojure">(register-query-handler &lt;-stack-detail
  {:query (fn [env params]
            ;; do sth
            {:value xxx}
            )
   :query-tx (fn [env params]
               ;; do sth
               {:delta xxx}
               )})

(register-command-handler publish-stack-&gt;
  (fn [env params]
    ;; do sth
    {:status xxx}
    ))

;; Other Situations.
(sync-command publish-stack-&gt; :finish)
</pre>
</div>
</div>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-03-31</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/03/31/关于快速开发的构思/</guid>
    </item>
    <item>
      <title>本狗的Docker尝试</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/23/docker</link>
      <description><![CDATA[Docker的常用命令和配置]]></description>
      <pubDate>2016-03-30</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/23/docker</guid>
    </item>
    <item>
      <title>常用的命令行工具</title>
      <link>https://DogLooksGood.github.io/blog/2016/03/24/常用的命令行工具/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>常用的命令行工具</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">Fish Shell</a></li>
<li><a href="#orgheadline2">Tmux</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Fish Shell</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
使用Root权限, 用下面的命令安装:
</p>
<pre class="example">
yum-config-manager --add-repo http://fishshell.com/files/linux/RedHat_RHEL-6/fish.release:2.repo
yum install fish
</pre>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">Tmux</h2>
</div>

</div>
</div>]]></description>
      <pubDate>2016-03-30</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/03/24/常用的命令行工具/</guid>
    </item>
    <item>
      <title>Datomic&#39;s sort and limit</title>
      <link>https://DogLooksGood.github.io/blog/2016/03/14/datomic&#39;s-sort-and-limit/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Datomic&#39;s sort and limit</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">Datomic的query中, 没有实现.</a></li>
<li><a href="#orgheadline2">使用seek-datoms</a></li>
<li><a href="#orgheadline3"><span class="done DONE">DONE</span> 根据entity-id排序怎么做</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Datomic的query中, 没有实现.</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
<a href="https://groups.google.com/forum/#!topic/datomic/NgVviV9Sw8g">https://groups.google.com/forum/#!topic/datomic/NgVviV9Sw8g</a>
这里说全部查出来然后直接内存中处理, 但这并不是一种好方法 - -#
</p>

<p>
<a href="http://comments.gmane.org/gmane.comp.db.datomic.user/2256">http://comments.gmane.org/gmane.comp.db.datomic.user/2256</a>
这里有一些关于 <code>datoms</code> 和 <code>index-range</code> 的讨论.
</p>

<p>
<a href="http://clojurians-log.mantike.pro/datomic/2016-01-15.html">http://clojurians-log.mantike.pro/datomic/2016-01-15.html</a>
这里有关于datomic没有 sort, offset, limit 的解释.
</p>

<p>
<a href="http://stackoverflow.com/questions/27162566/equivalent-of-sql-limit-clause-in-datomic">http://stackoverflow.com/questions/27162566/equivalent-of-sql-limit-clause-in-datomic</a>
stackoverflow中的这个方法, 个人觉得比较好.
</p>
</div>
</div>
<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">使用seek-datoms</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
<code>seek-datoms</code> 会返回一个lazy-seq, 这样我们能做的事情就很多了.
</p>
<div class="org-src-container">

<pre class="src src-clojure">;; 使用 `AVET` 索引, 可以指定一到多个参数
(d/seek-datoms
  (d/db conn)
  :avet :user/username)
;; 得到的`似乎`是按照username排序的lazy-seq
;; 如果需要前3个. 并且需要追加其他属性
(let [db (d/db conn)]
  (-&gt;&gt; (d/seek-datoms
         (d/db conn)
         :avet :user/username)
         (take 3)
    (mapv #(d/pull db '[:user/status :db/id :user/username] (:e %)))))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="done DONE">DONE</span> 根据entity-id排序怎么做</h2>
<div class="outline-text-2" id="text-orgheadline3">
<ul class="org-ul">
<li>State "DONE"       from "TODO"       <span class="timestamp-wrapper"><span class="timestamp">[2016-03-14 Mon 23:34]</span></span></li>
</ul>
<p>
使用 <code>d/datoms</code> 和 <code>AEVT</code> 索引
</p>
<div class="org-src-container">

<pre class="src src-clojure">(d/datoms (d/db conn)
  :aevt :user/username)
</pre>
</div>
<p>
这个会获取所有有 :user/username 属性的, 按照entity-id排序的datom.
</p>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-03-14</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/03/14/datomic&#39;s-sort-and-limit/</guid>
    </item>
    <item>
      <title>Emacs Clojure 开发的的一些配置</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/19/cider</link>
      <description><![CDATA[Cider的一些实用配置]]></description>
      <pubDate>2016-03-08</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/19/cider</guid>
    </item>
    <item>
      <title>pub-sub</title>
      <link>https://DogLooksGood.github.io/blog/2016/03/08/pub-sub/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>pub-sub</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">Pubbing 和 Subbing</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">Pubbing 和 Subbing</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
<span class="underline">并没有怎么看懂, 先记录下来</span>
</p>

<p>
首先启动REPL, 并加载async.
</p>
<div class="org-src-container">

<pre class="src src-clojure">(use 'clojure.core.async)
</pre>
</div>

<p>
<code>Publishing</code> (发行) 和 <code>Subscribing</code> (订阅) 是在处理异步事件时经常用的两个概念.
<code>pub</code> 函数接收一个 channel 和一个 topic 函数, 返回一个 <code>publication</code>:
</p>
<div class="org-src-container">

<pre class="src src-clojure">(def input-chan (chan))
(def our-pub (pub input-chan :msg-type))
</pre>
</div>

<p>
<code>publication</code> 并不是 channel, 不要用put!向他发送消息.
</p>
<div class="org-src-container">

<pre class="src src-clojure">(put! our-pub {:msg-type :greeting :text "hello"})
;; IllegalArgumentException No implementation of method: :put! of protocol
</pre>
</div>

<p>
我们应该直接发送消息给原来的channel:
</p>
<div class="org-src-container">

<pre class="src src-clojure">(&gt;!! input-chan {:msg-type :greeting :text "hello"})
; true
</pre>
</div>
<p>
(通常情况下, 如果没有 <code>input-chan</code> 的消费者, 这里会阻塞. 但是 <code>pub</code> 的实现中, 会为它创建两个 <code>go</code> 块来
代替主线程挂起. )
</p>

<p>
<code>topic-fn</code> 会作用在所有的传给 publication 的值上, 在上面的情况中, <code>:msg-type</code> 被用来作为这个函数.
并且会返回 <code>:greeting</code>, <code>topic-fn</code> 用来给消息分类, 但不会修改消息. 如果一个 publication使用 <code>inc</code> 作为topic函数
传递的值也是不会改变的.
我们如何获得这个值, 我们可以用对应 <code>sub</code> 函数:
</p>
<div class="org-src-container">

<pre class="src src-clojure">(def output-chan (chan))
(sub our-pub :greeting output-chan)
; #object[clojure.core.async.impl.channels.ManyToManyChannel
</pre>
</div>
<p>
<code>sub</code> 接受一个 publication, 一个topic和一个channel. 这个channel会接受来自publication中的, 所有的满足
<code>(= (topic-fn v) topic)</code> 的值.
</p>
<div class="org-src-container">

<pre class="src src-clojure">(go-loop []
  (let [{:keys [text]} (&lt;! output-chan)]
    (println text)
    (recur)))
</pre>
</div>

<p>
注意, 尽管我们之前已经把一个值放到了 <code>input-chan</code>, 但是这里什么都不会发生.
因为 publication 会抛弃所有不符合 subscrbe 的 topic. 我们的原始的信息丢弃了.
但是有了 subscribe channel 之后, 我们可以发布新的值.
</p>
<div class="org-src-container">

<pre class="src src-clojure">(&gt;!! input-chan {:msg-type :greeting :text "hi"})
;true
;hi
</pre>
</div>

<p>
如果我们发布了一个频道不接受的值, 整个发布会阻塞.
</p>
<div class="org-src-container">

<pre class="src src-clojure">(def loser-chan (chan))
(sub our-pub :loser loser-chan)
(&gt;!! input-chan {:msg-type :loser :text "I won't be accepted"})
</pre>
</div>

<p>
小心: 这里看起来返回 <code>true</code> 并且不会阻塞, 因为 pubilcation 实际上是从 <code>input-chan</code> 中取值.
但是在发行中的 <code>go</code> 块是会阻塞的. <code>&gt;!!</code> 一个 <code>:loser</code> 在主线程不会阻塞, 但是在接下来的线程会阻塞.
</p>

<p>
如果你向 publication 订阅一个channel, 确保他可以接受值. 你可以通过很多方式来实现, 但是最好从 publication 来处理.
因为你可能不知道哪里出问题了, 直到另外一个 topic 也被阻塞了.
</p>

<p>
有时候你无法这么做, 比如消费的操作是由资源决定的. 这种情况下, 你可以创建 topic 指定的 buffer: <code>pub</code> 函数最后传入一个
<code>buf-fn</code> 作为参数. <code>buf-fn</code> 接受一个topic, 返回一个 buffer 和一个数值. buffer-fn 可以简单的是一个 map:
</p>
<div class="org-src-container">

<pre class="src src-clojure">  {:predict-election 100
   :flip-a-coin 3}

(def pub-central
  (let [topic-fn #(case (:msg-type %) 
                    :db-change :acid
                    :http-request :stateless)
        buf-fn #(case %
                  :stateless (sliding-buffer 10)
                  :acid (dropping-buffer 1000))]
    (pub request-source topic-fn buf-fn)))
</pre>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-03-08</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/03/08/pub-sub/</guid>
    </item>
    <item>
      <title>DataScript&lt;--&gt;Datomic数据同步</title>
      <link>https://DogLooksGood.github.io/blog/2016/03/02/datascript&lt;--&gt;datomic数据同步/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>DataScript&lt;--&gt;Datomic数据同步</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">新的方法</a>
<ul>
<li><a href="#orgheadline2">一种查询方法(不能解决所有问题)</a></li>
</ul>
</li>
<li><a href="#orgheadline7">这种方式只能增量同步</a>
<ul>
<li><a href="#orgheadline3">数据结构</a></li>
<li><a href="#orgheadline4">数据的查询</a></li>
<li><a href="#orgheadline5">数据的更新</a></li>
<li><a href="#orgheadline6">流程</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">新的方法</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
目前能想到的方法是拿到 <code>tx-report</code> 的时候, 查询两次, 一次查询 <code>db-after</code>, 一次查询 <code>db-before</code>.
如果直接查询全量数据, 涉及到的范围会非常大. 但是datomic支持指定多个数据源.
</p>

<p>
假设有一个查询是这样的逻辑:
</p>
<div class="org-src-container">

<pre class="src src-clojure">(d/q '[:find
       [(pull ?e [:db/id
                  :message/content
                  {:message/from [:user/nickname]
                   :message/to [:user/nickname]}]) ...]
           :where
           [?e :message/content]
           [?e :message/to ?u]
           [?e :message/from ?from]
           [?u :user/nickname "dog"]
           [?u :user/friends ?from]]
      (d/db conn))
</pre>
</div>
<p>
这个查询, 查询一个名叫dog的用户, 收到的所有来自于他的好友, 并发送给他的信息.
这种查询的结果, 在两种情况下会发生变化.
</p>
<ul class="org-ul">
<li>产生了新的符合条件的信息</li>
<li>dog的好友列表, 发生了变化.</li>
</ul>

<p>
监听 <code>tx-report-queue</code>, 我们可以得到四个比较重要的东西. 
</p>
<ul class="org-ul">
<li><code>db-before</code> 事务发生之前的数据库</li>
<li><code>db-after</code> 事务发生之后的数据库</li>
<li><code>tx-data</code> 事务的所有datom, 本身也是一个数据源</li>
<li><code>tempids</code> 事务中新增数据的entity id</li>
</ul>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2">一种查询方法(不能解决所有问题)</h3>
<div class="outline-text-3" id="text-orgheadline2">
<div class="org-src-container">

<pre class="src src-clojure">(d/q '[:find [(pull ?e [:db/id
                          :message/content
                          {:message/from [:user/nickname]
                           :message/to [:user/nickname]}]) ...]
         :in $ $tx-data
         :where
         [$tx-data ?u]
         [$ ?e :message/to ?u]
         [$ ?e :message/from ?from]
         [$ ?u :user/nickname "dog"]
         [$ ?u :user/friends ?from]]
    db tx-data)
</pre>
</div>
<p>
假设用户列表发生变化, 我们用这个查询查询两次, 一次db为 <code>db-before</code>, 一次db为 <code>db-after</code>.
</p>

<p>
然后对比得到的数据, 我们就得到了之前的查询结果的增量变化(新增或减少数据).
</p>

<p>
如果不考虑数据的减少, 那么还是可以用下面的方法.
</p>
</div>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7">这种方式只能增量同步</h2>
<div class="outline-text-2" id="text-orgheadline7">
</div><div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3">数据结构</h3>
<div class="outline-text-3" id="text-orgheadline3">
<p>
消息有:message/to和:message/content, 用户有:user/nickname.
:message/to是ref类型, 指向用户的entity-id
</p>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4">数据的查询</h3>
<div class="outline-text-3" id="text-orgheadline4">
<div class="org-src-container">

<pre class="src src-clojure">(d/q '[:find [(pull ?e [*]) ...]
       :in $ ?n
       :where
       [?e :message/to ?u]
       [?u :user/nickname ?n]]
  (d/db conn) "dog")
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5">数据的更新</h3>
<div class="outline-text-3" id="text-orgheadline5">
<div class="org-src-container">

<pre class="src src-clojure">(def tx-data
  [[1321867981 :message/to 1236782618 1283768726 true]
   [1321867981 :message/content "dog" 1283768726 true]])

(d/q '[:find [(pull ?e [*]) ...]
       :in $ $tx-data ?n
       :where
       [$tx-data ?e]
       [$ ?e :message/to ?u]
       [$ ?u :user/nickname ?n]]
  db-after tx-data "dog")
</pre>
</div>
</div>
</div>
<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6">流程</h3>
<div class="outline-text-3" id="text-orgheadline6">
<ul class="org-ul">
<li>客户端UI组件加载时, 向服务器和DataScript(还没有数据)发起查询. 查询语句需要是pull风格的.</li>
<li>服务器通过pull的查询, 查出来需要的entity, 直接返回给客户端. 
客户端不需要将entity拆分成tx, 直接合并到DataScript即可.</li>
<li>监听tx-report-queue, 或者新发生transaction的tx-data和db-after, 
在原有查询的基础上组合新的查询. 可以查询到所有受到影响的entity.</li>
<li>把受到影响的entity推送给客户端.</li>
<li>服务器推送的数据, 客户端UI组件重绘.</li>
</ul>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-03-05</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/03/02/datascript&lt;--&gt;datomic数据同步/</guid>
    </item>
    <item>
      <title>从OOP的设计模式到FP</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/23/oop2fp</link>
      <description><![CDATA[Clojure中一些设计模式的实现]]></description>
      <pubDate>2016-02-23</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/23/oop2fp</guid>
    </item>
    <item>
      <title>Rum - 一个简单,灵活,可扩展的ClojureScript的React实现</title>
      <link>https://DogLooksGood.github.io/blog/2016/02/13/rum</link>
      <description><![CDATA[Rum的学习笔记]]></description>
      <pubDate>2016-02-22</pubDate>
      <guid>https://DogLooksGood.github.io/blog/2016/02/13/rum</guid>
    </item>
  </channel>
</rss>